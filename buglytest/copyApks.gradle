import groovy.transform.Field

def hasApp = project.plugins.hasPlugin("com.android.application")
if (!hasApp) {
    return
}
if (!hasChannelTask && !hasTinkerPatchTask) {
    return
}

@Field TAG = "COPYING:"


def deleteDirs(def dirs) {
    file(dirs).listFiles().each {
        if (it.isDirectory()) {
            deleteDirs(it.getPath())
        } else {
            it.delete()
        }
    }
    file(dirs).delete()
}

def copyTinkerBase = { targetDir ->
    def target = file("${targetDir}/tinkerBase")
    if (target.exists()) {
        target.delete()
    }
    target.mkdirs()
    def targetPath = target.getPath()
    println(TAG + " copy to path: " + targetPath)
    def tinkerBakDir = file(tinkerSupport.autoBackupApkDir)
    println("$TAG find tinkerBakDir = $tinkerBakDir")
    if (tinkerBakDir == null || !tinkerBakDir.exists() || !tinkerBakDir.listFiles()[0].exists()) {
        println("$TAG can not find tinkerBakDir")
        return
    }
    def tinkerBakPath = tinkerBakDir.listFiles()[0].getPath()
    println("$TAG tinkerBakPath = $tinkerBakPath")

    copy {
        from tinkerBakPath
        into targetPath
        include "*.*"
    }
    target.listFiles().each {
        if (it.getPath().endsWith(".apk")) {
            def targetApkName = it.getParent() + "/${project.name}-base.apk"
            println("rename apk=" + targetApkName)
            it.renameTo(targetApkName)
        }
    }

    println("$TAG delete  tinkerBakDir")
    deleteDirs(tinkerBakDir)
}

//拷贝Patch文件
def copyTinkerPatch = { targetDir, var ->
    def target = file("$targetDir/patch")
    if (target.exists()) {
        target.delete()
    }
    def targetPath = target.getPath()

    def patchDir = file("$buildDir/outputs/patch/${var}")
    if (patchDir == null || !patchDir.exists() || patchDir.listFiles().length <= 0) {
        println("$TAG can not find patchDir files patchDir=${patchDir}")
        return
    }
    println("$TAG copy patch files to=" + targetDir)
    copy {
        from patchDir.getPath()
        into targetPath
        include "*.*"
    }
    deleteDirs(patchDir.getPath())
}

def copyChannelApks = { targetDir ->
    def target = file("$targetDir/channels")
    if (target.exists()) {
        target.delete()
    }
    target.mkdirs()
    def targetPath = target.getPath()

    def channelsPath = channel != null && channel.baseOutputDir.exists() && channel.baseOutputDir.listFiles().size() > 0 ? channel.baseOutputDir.listFiles()[0].getPath() : null
    if (channelsPath == null) {
        return
    }
    println("$TAG channelsPath = ${channelsPath}")

    copy {
        from channelsPath
        into targetPath
        include "*.*"
    }
    deleteDirs(channelsPath)
}
def myTaskName = ""
gradle.startParameter.getTaskNames().each { taskName ->
    println("taskName.taskName=" + taskName)
    myTaskName = taskName
}
println(" hasChannelTask=$hasChannelTask, hasTinkerPatchTask=$hasTinkerPatchTask")
project.android.applicationVariants.all { variant ->
    tasks.all { task ->
        if (task.project.name != project.name || myTaskName != task.name
                || !myTaskName.endsWith(variant.name.capitalize())) {
            return
        }
        def targetBakPath = "${project.projectDir}/apkBackup/${project.name}-${variant.versionName}" + "-${variant.versionCode}" + "-${variant.name}"
        if (hasChannelTask) {
            targetBakPath = targetBakPath + "-channels"
        } else if (hasTinkerPatchTask) {
            targetBakPath = targetBakPath + "-patch"
        } else {
            return
        }
        println("targetBakPath=" + targetBakPath + ", task.name=" + task.name)
        if (task.name == "buildTinkerPatchRelease" || task.name == "buildTinkerPatchBeta") {
            task.doLast {
                copyTinkerPatch(targetBakPath, variant.name)
                copyTinkerBase(targetBakPath)
            }
        }
        if (task.name == "channelRelease" || task.name == "channelBeta") {
            task.doLast {
                println("targetBakPath=" + targetBakPath + ", task.name=" + it.name)
                copyChannelApks(targetBakPath)
                copyTinkerBase(targetBakPath)
            }
        }

    }
}