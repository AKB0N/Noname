apply plugin: 'com.android.library'

def config = rootProject.ext.android
def librarys = rootProject.ext.dependences

android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion

    defaultConfig {
        minSdkVersion config.miniSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile librarys.appcompat
    compile librarys.preference
    compile librarys.palette
    testCompile 'junit:junit:4.12'

    compile librarys.glide
    compile librarys.rxjava
    compile librarys.rxandroid
}


dependencies {
    provided files(getLayoutLibPath())
}

def getLayoutLibPath() {
    def rootDir = project.rootDir
    def localProperties = new File(rootDir, "local.properties")
    def sdkDir = null
    if(localProperties.exists()){
        Properties properties = new Properties()
        localProperties.withInputStream {
            instr -> properties.load(instr)
        }
        sdkDir = properties.getProperty('sdk.dir')
    }
    if(sdkDir == null || sdkDir.equals("")){
        sdkDir = System.getenv("ANDROID_HOME")
    }
    if (sdkDir != null && !sdkDir.equals("")) {
        def compileSdkVersion = android.compileSdkVersion
        Console.println("app compileSdkVersion : " + compileSdkVersion)
        def androidJarPath = sdkDir + "/platforms/" + compileSdkVersion + "/data/layoutlib.jar"
        return androidJarPath
    }
    return rootDir
}